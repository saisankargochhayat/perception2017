<?php
namespace UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UserBundle\Entity\Profile;
use UserBundle\Entity\User;

/**
 * ProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfileRepository extends EntityRepository
{
    public function getProfileByIdAsArray($id)
    {

//        SELECT * FROM `profile` AS `p` JOIN `user` AS `u`
//        ON (p.id = u.profile_id AND (u.id = 111 OR u.email = 'amitosh@example.com'))
//            if(is_null($id))
//                $id = -1;
        return $this->getEntityManager()
                    ->createQuery('
                      SELECT u, p FROM UserBundle:User u JOIN UserBundle:Profile p WITH
                      u.id = p.id WHERE u.id = :id
        ')
                    ->setParameter('id', $id)
                    ->getScalarResult();
    }

    public function createOrUpdateProfileFromData(User $user, $data = [])
    {
        $profile = $this->getProfileByUserId($user->getId());
        if (is_null($profile)) {
            $profile = new Profile();
            //$profile->setUserId($user->getId());
            $profile->setUser($user);
        }

        //do not replace data ??

        if (key_exists('gender', $data) && $profile->getGender() == Profile::GENDER_UNSPECIFIED)
            $profile->setGender($this->strGenderToIntGender($data['gender']));

        $this->getEntityManager()->persist($profile);
        $this->getEntityManager()->flush();

        return $profile;
    }

    public function getProfileByUserId($id)
    {
        return $this->findOneBy(['user' => $this->getEntityManager()->getReference('UserBundle:User',$id)]);
    }

    public function getProfileOfUser(User $user) {
        return $this->findOneBy(['user' => $user]);
    }

    private function strGenderToIntGender($gender)
    {
        if (empty($gender) || is_null($gender)) {
            return Profile::GENDER_UNSPECIFIED;
        }

        $gender = strtolower($gender);

        switch ($gender) {
            case 'male':
                return Profile::GENDER_MALE;
            case 'female':
                return Profile::GENDER_FEMALE;
            default:
                return Profile::GENDER_UNSPECIFIED;
        }
    }

    public function createProfile(User $user,array $data=[])
    {
        $profile = new Profile();

        $profile->setUser($user);

        if (key_exists('gender', $data))
            $profile->setGender($data['gender']);

        $this->getEntityManager()->persist($profile);
        $this->getEntityManager()->flush();
    }
}
